<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Patrick&#39;s Blog</title>
        <link>https://YPatrickW.github.io/</link>
        <description>Recent content on Patrick&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Fri, 01 Jul 2022 16:10:24 +0800</lastBuildDate><atom:link href="https://YPatrickW.github.io/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Key Points in Research</title>
        <link>https://YPatrickW.github.io/p/key-points-in-research/</link>
        <pubDate>Fri, 01 Jul 2022 16:10:24 +0800</pubDate>
        
        <guid>https://YPatrickW.github.io/p/key-points-in-research/</guid>
        <description>&lt;img src="https://YPatrickW.github.io/p/key-points-in-research/cover.png" alt="Featured image of post Key Points in Research" /&gt;&lt;h2 id=&#34;上采样&#34;&gt;上采样&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;将图像采样到更高的分辨率（由小分辨率到大分辨率）&lt;/li&gt;
&lt;li&gt;将高维特征进行放大&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;unpooling&#34;&gt;Unpooling&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Nearest Neighbor&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 174; 
			flex-basis: 419px&#34;
	&gt;
	&lt;a href=&#34;https://YPatrickW.github.io/p/key-points-in-research/uppooling1.png&#34; data-size=&#34;677x387&#34;&gt;
		&lt;img src=&#34;https://YPatrickW.github.io/p/key-points-in-research/uppooling1.png&#34;
			width=&#34;677&#34;
			height=&#34;387&#34;
			srcset=&#34;https://YPatrickW.github.io/p/key-points-in-research/uppooling1_hu523bca269449baeb720607054a454575_37333_480x0_resize_box_3.png 480w, https://YPatrickW.github.io/p/key-points-in-research/uppooling1_hu523bca269449baeb720607054a454575_37333_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;Nearest Neighbor&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;Nearest Neighbor&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bed of Nails&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 166; 
			flex-basis: 399px&#34;
	&gt;
	&lt;a href=&#34;https://YPatrickW.github.io/p/key-points-in-research/uppooling2.png&#34; data-size=&#34;678x407&#34;&gt;
		&lt;img src=&#34;https://YPatrickW.github.io/p/key-points-in-research/uppooling2.png&#34;
			width=&#34;678&#34;
			height=&#34;407&#34;
			srcset=&#34;https://YPatrickW.github.io/p/key-points-in-research/uppooling2_hu074f9bc64ea5fc8562b274160136a335_33855_480x0_resize_box_3.png 480w, https://YPatrickW.github.io/p/key-points-in-research/uppooling2_hu074f9bc64ea5fc8562b274160136a335_33855_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;Bed of Nails&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;Bed of Nails&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Max unpooling&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根据索引信息，反池化填充&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 220; 
			flex-basis: 529px&#34;
	&gt;
	&lt;a href=&#34;https://YPatrickW.github.io/p/key-points-in-research/uppooling3.png&#34; data-size=&#34;728x330&#34;&gt;
		&lt;img src=&#34;https://YPatrickW.github.io/p/key-points-in-research/uppooling3.png&#34;
			width=&#34;728&#34;
			height=&#34;330&#34;
			srcset=&#34;https://YPatrickW.github.io/p/key-points-in-research/uppooling3_hu87678ae6f68732adc4884ef585e755ef_79634_480x0_resize_box_3.png 480w, https://YPatrickW.github.io/p/key-points-in-research/uppooling3_hu87678ae6f68732adc4884ef585e755ef_79634_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;Max unpooling&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;Max unpooling&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;transposed-convolution-转置卷积&#34;&gt;Transposed Convolution (转置卷积)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;对特征进行padding，然后进行卷积&lt;/li&gt;
&lt;li&gt;Output_size = (input_size -1) * stride + filter - 2 * same padding + output padding&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 251; 
			flex-basis: 602px&#34;
	&gt;
	&lt;a href=&#34;https://YPatrickW.github.io/p/key-points-in-research/Transpose_Conv.png&#34; data-size=&#34;633x252&#34;&gt;
		&lt;img src=&#34;https://YPatrickW.github.io/p/key-points-in-research/Transpose_Conv.png&#34;
			width=&#34;633&#34;
			height=&#34;252&#34;
			srcset=&#34;https://YPatrickW.github.io/p/key-points-in-research/Transpose_Conv_huc1831075af5211b7b7de4534b40db14c_10429_480x0_resize_box_3.png 480w, https://YPatrickW.github.io/p/key-points-in-research/Transpose_Conv_huc1831075af5211b7b7de4534b40db14c_10429_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;Transposed Convolution&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;Transposed Convolution&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;trans_conv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;K&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;w&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;K&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shape&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;torch&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;zeros&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;h&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;w&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]):&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]):&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;K&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;高斯滤波&#34;&gt;高斯滤波&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;对整幅图像进行加权平均的过程，每一个像素点都由本身和领域内的其他像素值加权平均后得到&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以用于消除高斯噪声&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;高斯滤波只考虑了相邻像素空间位置层面的影响，没有考虑值域的影响
$$
G[I]&lt;em&gt;p = \sum&lt;/em&gt;{q\in S}G_\sigma(\Vert p-q \Vert)I_q \\&lt;br&gt;
q: \text{邻域空间} \\&lt;br&gt;
G_\sigma(x): 2d \text{高斯核}
$$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;高斯噪声&#34;&gt;高斯噪声&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;概率密度服从正态分布的一类噪声&lt;/li&gt;
&lt;li&gt;高斯白噪声：功率谱密度为均匀分布&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;高斯函数&#34;&gt;高斯函数&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;一维高斯分布&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$$
G（x）= \frac{1}{\sqrt{2\pi}\sigma}e^{-\frac{x^2}{2\sigma^2}}
$$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;二维高斯分布
$$
G（x, y）= \frac{1}{\sqrt{2\pi}\sigma^2}e^{-\frac{x^2+y^2}{2\sigma^2}}
$$&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;高斯核&#34;&gt;高斯核&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;根据坐标计算高斯模板&lt;/li&gt;
&lt;li&gt;保证高斯模板加起来为1&lt;/li&gt;
&lt;li&gt;输入图像乘以相关核&lt;/li&gt;
&lt;li&gt;相加得到中心点的高斯滤波的值&lt;/li&gt;
&lt;li&gt;方差$\sigma$决定了滤波的范围&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;双边滤波&#34;&gt;双边滤波&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;不仅考虑了空间位置的影响，还考虑了值域的影响，能够很好的保留边缘信息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;双边滤波器移除了部分噪声和纹理特征&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$$
BF[I]&lt;em&gt;p = \frac{1}{W_p}\sum&lt;/em&gt;{q\in S}G_{\sigma_s}(\Vert p-q \Vert)G_{\sigma_r}(\vert p-q \vert)I_q \\&lt;br&gt;
W_p = \sum_{q\in S}G_{\sigma_s}(\Vert p-q \Vert)G_{\sigma_r}(\vert p-q \vert)I_q
$$&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 332; 
			flex-basis: 797px&#34;
	&gt;
	&lt;a href=&#34;https://YPatrickW.github.io/p/key-points-in-research/bilateral.png&#34; data-size=&#34;768x231&#34;&gt;
		&lt;img src=&#34;https://YPatrickW.github.io/p/key-points-in-research/bilateral.png&#34;
			width=&#34;768&#34;
			height=&#34;231&#34;
			srcset=&#34;https://YPatrickW.github.io/p/key-points-in-research/bilateral_hu90eecacc7eace5e99d0a1a6261d7e38c_205906_480x0_resize_box_3.png 480w, https://YPatrickW.github.io/p/key-points-in-research/bilateral_hu90eecacc7eace5e99d0a1a6261d7e38c_205906_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;Bilateral Filter&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;Bilateral Filter&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;retinex-theory&#34;&gt;Retinex Theory&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;理论基础：物体的颜色不受光照非均匀性的影响，具有一致性，以颜色恒常性为基础&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过对原始图像进行高斯滤波来获取照度图像，最后将照度图像从原始图像分离出来，从而获得反射图像&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;原始图像$I(x,y)$可被表示为为入射分量$L(x,y)$和反射分量$R(x,y)$的乘积&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$L(x,y)$： 环境光的照射分量&lt;/li&gt;
&lt;li&gt;$R(x,y)$： 携带图像细节信息的目标物体的反射分量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从原始图像$S(x,y)$估计出光照分量$L(x,y)$, 从而分解出反射分量$R(x,y)$, 消除光照不均的影响&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;照度估计：将图像转换到对数域对整幅图像求均值&lt;/p&gt;
&lt;p&gt;$$
R(x,y) \approx log(I(x,y))-log(F(x,y)*I(x,y)) \\&lt;br&gt;
*: Convolution \\&lt;br&gt;
F(x,y):Surrouding \quad function
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Single-scale Retinex(SSR)&lt;/p&gt;
&lt;p&gt;$$
SSR_i(x,y)=log(I_i(x,y))-log(G_\sigma*I_i(x,y))\\&lt;br&gt;
i \in R,G,B \\&lt;br&gt;
G_\sigma(x,y) = Ke^{-\frac{x^2+y^2}{2\sigma^2}}\\&lt;br&gt;
\int\int G_\sigma(x,y)dxdy =1
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Multi-scale Retinex(MSR)
$$
MSR_i(x,y,\sigma_k) = \sum_{k=1}^nw_kSSR_i(x,y,\sigma_k)
$$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;亮度直方图&#34;&gt;亮度直方图&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;关于灰度级的分布函数，灰度值范围$[0, 255]$&lt;/li&gt;
&lt;li&gt;将图像种所有的像素点，按照灰度值的大小，统计其出现的频率&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;adainadaptive-instance-normalization&#34;&gt;AdaIN(Adaptive Instance Normalization)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;自适应实例标准化&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将Content image(x)特征的均值和方差对齐到Style image(y)的均值和方差&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;特征的均值和方差代表着图片的风格
$$
AdaIn(x,y) = \sigma(y)(\frac{x-\mu(x)}{\sigma(x)})+\mu(y)
$$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;log--exp&#34;&gt;Log &amp;amp; Exp&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Log 操作：压缩图像对比度，使图像变得模糊
$$
s = c * log(1+r) \\&lt;br&gt;
c = 255/(log(1+max(r))) \\&lt;br&gt;
r: \text{输入像素} \quad c:\text{缩放常数} \quad s:\text{输出像素}
$$&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;cv2&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;numpy&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;np&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# Load the image&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;img&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cv2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;imread&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# Apply log transform&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;img_log&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;img&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;img&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;255&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# Specify the data type&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;img_log&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;img_log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dtype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;np&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uint8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# Display the image&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;cv2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;imshow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;log_image&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;img_log&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;cv2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;imshow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;original_img&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;img&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;cv2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;waitKey&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Exp操作：拉伸对比度&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;图像的空域和频域&#34;&gt;图像的空域和频域&lt;/h2&gt;
&lt;h3 id=&#34;导数&#34;&gt;导数&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;一阶导数
$$
\frac{\partial I}{\partial x} = I(x+1, y) - I(x, y) \\&lt;br&gt;
\frac{\partial I}{\partial y} = I(x+1, y) - I(x, y)
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;二阶导数
$$
\frac{\partial^2 I}{\partial x^2} = I(x+1, y) - I(x-1, y)-2f(x,y) \\&lt;br&gt;
\frac{\partial^2 I}{\partial y^2} = I(x, y+1) - I(x, y-1)-2f(x,y) \\&lt;br&gt;
\nabla^2I = I(x+1, y) - I(x-1, y) +I(x, y+1) - I(x, y-1)-4f(x,y)
$$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根据二阶导系数得到$Laplacian \quad Filter$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;灰度化&#34;&gt;灰度化&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;使得彩色图像的$R,G,B$分量相等的过程&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;图像的频率&#34;&gt;图像的频率&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;表征图像中灰度变化剧烈程度的指标&lt;/li&gt;
&lt;li&gt;灰度变化缓慢（低频）灰度变化剧烈（高频）&lt;/li&gt;
&lt;li&gt;高频决定细节（边缘），低频决定总体形状&lt;/li&gt;
&lt;li&gt;图像的空域乘积等于频域卷积&lt;/li&gt;
&lt;li&gt;图像的空域卷积等于频域乘积（频域乘积：频率函数$\times$滤波函数）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;傅里叶变换&#34;&gt;傅里叶变换&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;傅里叶变换：只能获取一段信号总体上包含哪些频率成分，但是对各个成分出现的时刻不知道&lt;/li&gt;
&lt;li&gt;无法处理非平稳信号&lt;/li&gt;
&lt;li&gt;将图像信号分解为不同频率的正弦波，得到不同频率下正弦波的系数&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;小波变换&#34;&gt;小波变换&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;短暂的震荡波（母带信号：Haar, Morlet, Daubechies）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将图像信号分解为由母带信号缩放和位移之后的一组小波，得到不同尺度小波下的系数&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$$
X(a, b) = \frac{1}{\sqrt{a}}\int_{-\infty}^{\infty}\psi(\frac{t-b}{a})x(t)dt\\&lt;br&gt;
a：Sacling \quad factor \\&lt;br&gt;
b: Time \quad shift
$$&lt;/p&gt;
&lt;h2 id=&#34;convolution&#34;&gt;Convolution&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Normal Conv&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 340; 
			flex-basis: 816px&#34;
	&gt;
	&lt;a href=&#34;https://YPatrickW.github.io/p/key-points-in-research/Normal_conv.png&#34; data-size=&#34;1218x358&#34;&gt;
		&lt;img src=&#34;https://YPatrickW.github.io/p/key-points-in-research/Normal_conv.png&#34;
			width=&#34;1218&#34;
			height=&#34;358&#34;
			srcset=&#34;https://YPatrickW.github.io/p/key-points-in-research/Normal_conv_hu60f0f62522805502a50217a3c64549ad_18500_480x0_resize_box_3.png 480w, https://YPatrickW.github.io/p/key-points-in-research/Normal_conv_hu60f0f62522805502a50217a3c64549ad_18500_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;Normal Convolution&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;Normal Convolution&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Depth-wise Conv&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 288; 
			flex-basis: 692px&#34;
	&gt;
	&lt;a href=&#34;https://YPatrickW.github.io/p/key-points-in-research/Depth_wise_conv.png&#34; data-size=&#34;1308x453&#34;&gt;
		&lt;img src=&#34;https://YPatrickW.github.io/p/key-points-in-research/Depth_wise_conv.png&#34;
			width=&#34;1308&#34;
			height=&#34;453&#34;
			srcset=&#34;https://YPatrickW.github.io/p/key-points-in-research/Depth_wise_conv_hub9db96c6ef2df6a07a371f1e48bce385_22592_480x0_resize_box_3.png 480w, https://YPatrickW.github.io/p/key-points-in-research/Depth_wise_conv_hub9db96c6ef2df6a07a371f1e48bce385_22592_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;Depth-wise Convolution&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;Depth-wise Convolution&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Point-wise Conv&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 270; 
			flex-basis: 649px&#34;
	&gt;
	&lt;a href=&#34;https://YPatrickW.github.io/p/key-points-in-research/Point_wise_conv.png&#34; data-size=&#34;963x356&#34;&gt;
		&lt;img src=&#34;https://YPatrickW.github.io/p/key-points-in-research/Point_wise_conv.png&#34;
			width=&#34;963&#34;
			height=&#34;356&#34;
			srcset=&#34;https://YPatrickW.github.io/p/key-points-in-research/Point_wise_conv_hua22f58a578cb85964dc957bf01619d40_24887_480x0_resize_box_3.png 480w, https://YPatrickW.github.io/p/key-points-in-research/Point_wise_conv_hua22f58a578cb85964dc957bf01619d40_24887_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;Point-wise Convolution&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;Point-wise Convolution&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;图像基础&#34;&gt;图像基础&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;动态范围：最大可度量灰度与最小可检测灰度之比，建立了一个系统能够表示衣服图像所具有的最低和最高灰度值
&lt;ul&gt;
&lt;li&gt;上限取决于饱和度，下限取决于噪声&lt;/li&gt;
&lt;li&gt;饱和度：指一个最大值，超过这个该值的所有灰度值都将被裁剪掉&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;对比度：最高灰度和最低灰度级间的灰度差&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>常用命令合集</title>
        <link>https://YPatrickW.github.io/p/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%90%88%E9%9B%86/</link>
        <pubDate>Mon, 29 Nov 2021 14:32:55 +0800</pubDate>
        
        <guid>https://YPatrickW.github.io/p/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%90%88%E9%9B%86/</guid>
        <description>&lt;img src="https://YPatrickW.github.io/p/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%90%88%E9%9B%86/cover.jpg" alt="Featured image of post 常用命令合集" /&gt;&lt;h2 id=&#34;linux命令&#34;&gt;Linux命令&lt;/h2&gt;
&lt;p&gt;查看GPU状态：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用nvidia-smi&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;nvidia-smi
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装gpustat&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;pip install gpustat
gpustat
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;新开一个terminal查看：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;watch -n 0.1 nvidia-smi
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;安装APEX加速库：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;可以下载到任意位置&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;下载命令&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git clone https://github.com/NVIDIA/apex
cd apex
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装命令：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;官方方法：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;pip install -v --disable-pip-version-check --no-cache-dir --global-option=&amp;quot;--cpp_ext&amp;quot; --global-option=&amp;quot;--cuda_ext&amp;quot; ./
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装失败可以尝试使用：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;python3 setup.py install
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;解决windows和linux编码不兼容问题：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;vim xxx.sh
: set ff=unix
esc :wq
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;后台不挂断：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;nohup xxx.sh &amp;amp;
appending output to nohup.out
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;出现第二行代码即成功&lt;/p&gt;
&lt;p&gt;&amp;amp;：后台执行，终端退出仍执行&lt;/p&gt;
&lt;p&gt;😏&lt;strong&gt;谨记：2021年12月1日训练bert模型没有使用nohup，然后直接关闭掉了终端，导致从头开始训练!!&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看进程PID&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;1. ps -aux | grep &amp;quot;xxx.sh&amp;quot;

2. htop

3. top -u user_name
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;复制文件 &amp;amp; 移动文件 &amp;amp; 改名&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cp file/dir dir
mv file/dir dir
mv old_name new_name
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看所有者和权限 &amp;amp; 修改权限：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ls -l
chmod xxx(e.g. 777) xxx(e.g. xxx.sh)
chmod xxx(e.g. u=rwx, g=rx, o=r) xxx(e.g. xxx.sh)
chmod +(e.g. r,w,x) xxx(e.g. xxx.sh) (add permission for all)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;conda-命令&#34;&gt;Conda 命令&lt;/h2&gt;
&lt;p&gt;下载miniconda：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;wget https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/Miniconda3-latest-Linux-x86_64.sh
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;激活conda：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;进入miniconda安装位置&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cd ./bin
source activate
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;创建环境：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;conda create -n name python=xxx(e.g. 3.7)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;添加镜像：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;查看channel&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;conda config --show
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;添加清华镜像&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/
conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/
conda config --set show_channel_urls yes
conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;安装Pytorch:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;查看cuda版本&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cat /usr/local/cuda/version.json 
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;nvidia-smi
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;conda install pytorch torchvision torchaudio cudatoolkit=xxx(e.g. 11.3)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;个人用户配置java环境：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;tar -zxvf xxx.gz
cd ~
vi .bash_profile
添加：
export JAVA_HOME=/home/std/java/jdk1.8.0_301
export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar
export PATH=$JAVA_HOME/bin:$PATH
export JRE_HOME=$JAVA_HOME/jre
source .bash_profile
jave -version
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;hugo命令&#34;&gt;Hugo命令&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Blog起始页启动&lt;strong&gt;git bash&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;hugo
cd ./public
git add .
git commit -m &amp;quot;xxx&amp;quot;
git push -u origin main
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;git命令&#34;&gt;Git命令&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;修改&lt;strong&gt;git bash&lt;/strong&gt;默认分支为&lt;em&gt;&lt;strong&gt;main&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git config --global init.defaultBranch main
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;添加远程分支&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git remote add &amp;quot;remote name&amp;quot; xxx.git
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建分支&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git checkout -b &amp;quot;branch name&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>剑指offer</title>
        <link>https://YPatrickW.github.io/p/%E5%89%91%E6%8C%87offer/</link>
        <pubDate>Sun, 17 Oct 2021 19:03:38 +0800</pubDate>
        
        <guid>https://YPatrickW.github.io/p/%E5%89%91%E6%8C%87offer/</guid>
        <description>&lt;img src="https://YPatrickW.github.io/p/%E5%89%91%E6%8C%87offer/cover.jpg" alt="Featured image of post 剑指offer" /&gt;&lt;h2 id=&#34;查找算法&#34;&gt;查找算法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;平均查找长度(ASL)
&lt;ul&gt;
&lt;li&gt;$ASL = P_i * \sum C_i$
&lt;ul&gt;
&lt;li&gt;$P_i$: 第$i$​个数据元素的概率&lt;/li&gt;
&lt;li&gt;$C_i$: 找到第$i$​个数据元素已比较过的次数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;顺序查找
&lt;ul&gt;
&lt;li&gt;$ASL = 1/n * (1+2+\dots +n) = \frac{n+1}{2}$&lt;/li&gt;
&lt;li&gt;时间复杂度$O(n)$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;二分查找
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;最坏$k$次二分找到&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;时间复杂度$O(logn)$​&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$mid = (right+left) // 2$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据元素必须有序&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;防止溢出：$mid = left + (right-left) // 2$​&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;num&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;midpoint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;right&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;midpoint&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;left&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;midpoint&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;排序算法&#34;&gt;排序算法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;冒泡排序&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;对无序表进行多次比较交换&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;算法复杂度为$O(n^2)$​&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt;
            &lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 冒多少次&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 冒泡的方向&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;选择排序&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;每次仅进行一次交换，记录最大项的所在位置，再和本次的最后一项进行交换（只进行一次交换）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;：&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;max_pos&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;max_pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;max_pos&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;temp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;temp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;temp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;max_pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;max_pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;temp&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;![选择排序](selected sort.png)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;插入排序&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;算法复杂度为$O(n^2)$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;维持一个已经排好序的子列表，不断扩充子列表直到全表&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;index&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)):&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;cur_val&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;index&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cur_val&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cur_val&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;![插入排序](insert sort.png)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;归并排序&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;递归算法，将数据表持续分裂为两半，对两半进行归并排序&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;复杂度为$O(nlogn)$&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;merge_sort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;mid&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;//&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;left&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;merge_sort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;right&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;merge_sort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:])&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;merged&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;left&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;right&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;left&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;right&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;merged&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;left&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;merged&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;right&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;merged&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;extend&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;right&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;right&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;left&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;merged&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;快速排序&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;递归算法，依据一个“中值”数据将数据表分为两半：小于“中值”的一半和大于“中值”的一半，每一部分进行快速排序&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;选定中值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;左标右移，右标左移，左标遇到数比中值大就停止，右标遇到比中值小就停止，交换左右标的值，两标相错就结束移动&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;算法复杂度为$O(nlogn)$&lt;/p&gt;
&lt;p&gt;![快速排序](quick sort.png)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;quicksort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arr_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;left_index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;right_index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;left_index&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;right_index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;left_index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;right_index&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;# 左端为哨兵元素&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;# 最后i和j指向同一个小于哨兵元素的元素&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arr_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arr_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;left_index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; 
        &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arr_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arr_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;left_index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;arr_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arr_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arr_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arr_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; 
	&lt;span class=&#34;n&#34;&gt;arr_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arr_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;left_index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arr_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;left_index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arr_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;quicksort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arr_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;left_index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;quicksort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arr_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;right_index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;quicksort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;left&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;right&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;二叉树的遍历&#34;&gt;二叉树的遍历&lt;/h2&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 91; 
			flex-basis: 220px&#34;
	&gt;
	&lt;a href=&#34;https://YPatrickW.github.io/p/%E5%89%91%E6%8C%87offer/tree.png&#34; data-size=&#34;279x304&#34;&gt;
		&lt;img src=&#34;https://YPatrickW.github.io/p/%E5%89%91%E6%8C%87offer/tree.png&#34;
			width=&#34;279&#34;
			height=&#34;304&#34;
			srcset=&#34;https://YPatrickW.github.io/p/%E5%89%91%E6%8C%87offer/tree_hu5b05834051b748fd63dd1e9efd0e5732_25207_480x0_resize_box_3.png 480w, https://YPatrickW.github.io/p/%E5%89%91%E6%8C%87offer/tree_hu5b05834051b748fd63dd1e9efd0e5732_25207_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;二叉树&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;二叉树&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前序遍历：根左右
&lt;ul&gt;
&lt;li&gt;3-9-20-15-7&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;中序遍历：左根右
&lt;ul&gt;
&lt;li&gt;9-3-15-20-7&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;后序遍历：左右根
&lt;ul&gt;
&lt;li&gt;9-15-7-20-3&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;前序遍历和中序遍历可以还原二叉树&lt;/li&gt;
&lt;li&gt;前序遍历和后序遍历不可以还原二叉树&lt;/li&gt;
&lt;li&gt;完全二叉树
&lt;ul&gt;
&lt;li&gt;叶节点最多出现在对底层和次底层&lt;/li&gt;
&lt;li&gt;最底层的叶节点都集中在最左边&lt;/li&gt;
&lt;li&gt;每个节点都有两个子节点，最多可以有一个节点例外&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;二叉查找树
&lt;ul&gt;
&lt;li&gt;左子树的值比父节点小，右子树的值比父节点大&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;优先队列&#34;&gt;优先队列&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;最大优先队列，无论入队顺序，当前最大的元素优先出队&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;最小优先队列，无论入队顺序，当前最小的元素优先出队&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;二叉堆能保证优先队列的入队和出队复杂度都保持在$O(log n)$
&lt;ul&gt;
&lt;li&gt;保持在对数数量级上，需要保持二叉树的“平衡”——左右子树拥有相同数量的节点&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;堆
&lt;ul&gt;
&lt;li&gt;堆中所有节点的值必须大于或等于其孩子节点的值&lt;/li&gt;
&lt;li&gt;当树的高度h大于0时，所有叶子节点都位于第h层或者第h-1层&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;递归&#34;&gt;递归&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;结束条件&lt;/li&gt;
&lt;li&gt;减小规模&lt;/li&gt;
&lt;li&gt;调用自身&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;快速幂&#34;&gt;快速幂&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;判断n的最右一位是否位1：$n$ &amp;amp; 1&lt;/li&gt;
&lt;li&gt;$x^n = x^\frac{n}{2}\times x^\frac{n}{2} = (x^2)^{\frac{n}{2}}$&lt;/li&gt;
&lt;li&gt;时间复杂度为$O(logn)$&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;回溯法&#34;&gt;回溯法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;组合， 切割，子集，排列，棋盘问题&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Backtracking(xxx):
	if(终止条件)：
		收集结果
		return
	for(集合元素)：
		处理节点
		递归函数
		回溯操作
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;摩尔投票法&#34;&gt;摩尔投票法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;数组中每个元素都可以成为候选，维持一个count，如果元素和候选相同，count加一，否则减一，候选可变&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt; &lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nums&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;count&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;count&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;count&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;遍历子序列或者子串&#34;&gt;遍历子序列或者子串&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;以某个节点为开头的所有子序列: 如 [a], [a, b], [a,b,c] &amp;hellip; 再从以 &lt;code&gt;b&lt;/code&gt; 为开头的子序列开始遍历 [b], [b,c]&lt;/li&gt;
&lt;li&gt;根据子序列的长度为标杆，如先遍历出子序列长度为 1 的子序列，在遍历出长度为 2 的 等等&lt;/li&gt;
&lt;li&gt;以子序列的结束节点为基准，先遍历出以某个节点为结束的所有子序列，因为每个节点都可能会是子序列的结束节点，因此要遍历下整个序列，如: 以 b 为结束点的所有子序列:[a , b], [b] 以 c 为结束点的所有子序列: [a, b, c], [b, c], [ c ]&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
