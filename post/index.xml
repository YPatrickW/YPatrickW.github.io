<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Patrick&#39;s Blog</title>
    <link>https://YPatrickW.github.io/post/</link>
    <description>Recent content in Posts on Patrick&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 29 Nov 2021 14:32:55 +0800</lastBuildDate><atom:link href="https://YPatrickW.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>常用命令合集</title>
      <link>https://YPatrickW.github.io/p/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%90%88%E9%9B%86/</link>
      <pubDate>Mon, 29 Nov 2021 14:32:55 +0800</pubDate>
      
      <guid>https://YPatrickW.github.io/p/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%90%88%E9%9B%86/</guid>
      <description>Conda 命令 下载miniconda：
wget https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/Miniconda3-latest-Linux-x86_64.sh 激活conda：
 进入miniconda安装位置  cd ./bin source activate 创建环境：
conda create -n name python=版本 添加镜像：
  查看channel
conda config --show   添加清华镜像
conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/ conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/ conda config --set show_channel_urls yes conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/   安装Pytorch:
  查看cuda版本
cat /usr/local/cuda/version.json nvidia-smi   conda install pytorch torchvision torchaudio cudatoolkit=cuda版本 Linux命令 查看GPU状态：
  使用nvidia-smi</description>
    </item>
    
    <item>
      <title>剑指offer</title>
      <link>https://YPatrickW.github.io/p/%E5%89%91%E6%8C%87offer/</link>
      <pubDate>Sun, 17 Oct 2021 19:03:38 +0800</pubDate>
      
      <guid>https://YPatrickW.github.io/p/%E5%89%91%E6%8C%87offer/</guid>
      <description>查找算法  平均查找长度(ASL)  $ASL = P_i * \sum C_i$  $P_i$: 第$i$​个数据元素的概率 $C_i$: 找到第$i$​个数据元素已比较过的次数     顺序查找  $ASL = 1/n * (1+2+\dots +n) = \frac{n+1}{2}$ 时间复杂度$O(n)$   二分查找  最坏$k$次二分找到 时间复杂度$O(logn)$​ $mid = (right+left) // 2$ 数据元素必须有序 防止溢出：$mid = left + (right-left) // 2$    搜索算法 二叉树的遍历 二叉树
 前序遍历：根左右  3-9-20-15-7   中序遍历：左根右  9-3-15-20-7   后序遍历：左右根  9-15-7-20-3   前序遍历和中序遍历可以还原二叉树 前序遍历和后序遍历不可以还原二叉树  </description>
    </item>
    
  </channel>
</rss>
